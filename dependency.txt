<dependency>
    <groupId>net.sourceforge.tess4j</groupId>
    <artifactId>tess4j</artifactId>
    <version>5.6.0</version>
</dependency>

    <!-- ZXing (QR Code Reader) -->
    <dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>core</artifactId>
        <version>3.5.2</version>
    </dependency>
    <dependency>
    <groupId>org.openpnp</groupId>
    <artifactId>opencv</artifactId>
    <version>4.5.1-2</version>
</dependency>

    <dependency>
        <groupId>com.google.zxing</groupId>
        <artifactId>javase</artifactId>
        <version>3.5.2</version>
    </dependency>

    <!-- ImageIO Extensions (optional for TIFF if needed) -->
    <dependency>
        <groupId>com.twelvemonkeys.imageio</groupId>
        <artifactId>imageio-tiff</artifactId>
        <version>3.9.4</version>
    </dependency>

<dependency>
    <groupId>org.apache.pdfbox</groupId>
    <artifactId>pdfbox</artifactId>
    <version>2.0.29</version>
</dependency>


     try {
		            File file = new File("C:\\angular\\demo\\demo\\src\\main\\resources\\sample.pdf"); // Replace with your file path
		            PDDocument document = PDDocument.load(file);

		            if (!document.isEncrypted()) {
		                PDFTextStripperByArea stripper = new PDFTextStripperByArea();
		                stripper.setSortByPosition(true);

		                PDFTextStripper textStripper = new PDFTextStripper();
		                String text = textStripper.getText(document);

		                System.out.println("Extracted Table Data:\n" + text);
		            }

		            document.close();
		        } catch (IOException e) {
		            e.printStackTrace();
		        }
		    }


--
package com.example.demo;

import net.sourceforge.tess4j.*;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TesseractOCR {
    public static void main(String[] args) {
        File imageFile = new File("test.jpg"); // Path to your image
        Tesseract tesseract = new Tesseract();
        tesseract.setOcrEngineMode(1); // 0 = Legacy, 1 = LSTM, 2 = Legacy+LSTM
        tesseract.setTessVariable("preserve_interword_spaces", "1");
        tesseract.setTessVariable("textord_tabfind_find_tables", "1");
        tesseract.setLanguage("eng"); // English + Hindi OCR


        // Set the tessdata path
        tesseract.setDatapath("C:/Program Files/Tesseract-OCR/tessdata"); // Adjust for Linux/Mac

        // Set language (English + optional second language)
        tesseract.setLanguage("eng"); // Change to "eng+hin" for English & Hindi

        try {
            String result = tesseract.doOCR(imageFile);
            
            // Define the PAN pattern
            //String panPattern = "\\b[A-Z]{5}[0-9]{4}[A-Z]{1}\\b";

            // Compile regex pattern
//            Pattern pattern = Pattern.compile(panPattern);
//            Matcher matcher = pattern.matcher(result);
            String cleanedText = cleanOCRText(result);
            System.out.println("Extracted Text: \n" + cleanedText);

            String panPattern = "\\b[A-Z]{5}[0-9]{4}[A-Z]{1}\\b";
            String panNumber = extractUsingRegex(cleanedText, panPattern);

            // Extract Name and Father's Name using common labels
            String name = extractUsingLabel(cleanedText, "NAME:");
            String fatherName = extractUsingLabel(cleanedText, "Father's Name:");

            
            
//            // Store all PAN numbers found
//            List<String> panNumbers = new ArrayList<>();
//
//            while (matcher.find()) {
//                panNumbers.add(matcher.group()); // Extract PAN
//            }
//
//            // Print extracted PAN numbers
//            if (!panNumbers.isEmpty()) {
//                System.out.println("Extracted PAN Numbers: " + panNumbers);
//            } else {
//                System.out.println("No valid PAN number found.");
//            }
            System.out.println("Extracted Details:");
            System.out.println("Name: " + (name.isEmpty() ? "Not Found" : name));
            System.out.println("Father's Name: " + (fatherName.isEmpty() ? "Not Found" : fatherName));
            System.out.println("PAN: " + (panNumber.isEmpty() ? "Not Found" : panNumber));


        } catch (TesseractException e) {
            e.printStackTrace();
        }
    }
    // Method to extract data using regex
    private static String extractUsingRegex(String text, String pattern) {
        Pattern regexPattern = Pattern.compile(pattern);
        Matcher matcher = regexPattern.matcher(text);
        return matcher.find() ? matcher.group() : "";
    }

    // Method to extract text after a specific label
    private static String extractUsingLabel(String text, String label) {
        Pattern pattern = Pattern.compile(label + "\\s*(.*)");
        Matcher matcher = pattern.matcher(text);
        return matcher.find() ? matcher.group(1).trim() : "";
    }
    private static String cleanOCRText(String text) {
        text = text.replaceAll("[^a-zA-Z0-9:\n ]", ""); // Remove special characters
        text = text.replaceAll("\\s+", " "); // Normalize spaces
        text = text.replaceAll("[^a-zA-Z0-9: ]", ""); // Remove symbols
        text = text.replaceAll("\\s+", " "); // Normalize spaces
        text = text.replaceAll("\\b(?:PERMANENT ACCOUNT NUMBER|DATE OF BIRTH|SIGNATURE|COMMISSIONER OF INCOME TAX)\\b", ""); // Remove unwanted labels
        
        return text.trim();
    }

}

--
package com.example.demo;

import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import net.sourceforge.tess4j.*;
import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;


public class PreprocessImage {
    static { 
    	System.load("C:\\opencv\\opencv\\build\\java\\x64\\opencv_java4110.dll"); // Windows
    	// System.load("/usr/local/lib/libopencv_java451.so"); // Linux/Mac

    	//System.loadLibrary(Core.NATIVE_LIBRARY_NAME); 
    	}

    public static void main(String[] args) {
//        // Load image
//        Mat image = Imgcodecs.imread("C:\\angular\\demo\\demo\\src\\main\\resources\\test.jpeg", Imgcodecs.IMREAD_GRAYSCALE);
//
//        // Apply thresholding
//        Imgproc.threshold(image, image, 0, 255, Imgproc.THRESH_BINARY | Imgproc.THRESH_OTSU);
//
//        // Save processed image
//        Imgcodecs.imwrite("processed.png", image);
//        System.out.println("Preprocessed image saved.");
    	
        String inputImagePath = "processed.png";  // Change to your image path
        Mat image = Imgcodecs.imread(inputImagePath);

        // Convert to Grayscale
        Imgproc.cvtColor(image, image, Imgproc.COLOR_BGR2GRAY);

        // Apply Adaptive Thresholding (Makes text clearer)
        Imgproc.adaptiveThreshold(image, image, 255, Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C, Imgproc.THRESH_BINARY, 31, 2);

        // Save Processed Image for Debugging
        String outputImagePath = "C:/images/processed.jpg";
        Imgcodecs.imwrite(outputImagePath, image);

        // Pass Processed Image to Tesseract
        Tesseract tesseract = new Tesseract();
        tesseract.setDatapath("C:/Program Files/Tesseract-OCR/tessdata"); // Set Tesseract path
        tesseract.setLanguage("eng");

        try {
            String result = tesseract.doOCR(new java.io.File(outputImagePath));
            System.out.println("Extracted Text: \n" + result);
        } catch (TesseractException e) {
            e.printStackTrace();
        }
    }

    	
    
}

--
package com.example.demo;
import java.io.File;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import technology.tabula.*;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;

public class PDFTableExtractor {
    public static void main(String[] args) {
        try {
            File file = new File("sample1.pdf"); // Change this to your PDF file path
            PDDocument document = PDDocument.load(file);
            ObjectExtractor extractor = new ObjectExtractor(document);
            PageIterator pages = extractor.extract();

            SpreadsheetExtractionAlgorithm sea = new SpreadsheetExtractionAlgorithm();

            while (pages.hasNext()) {
                Page page = pages.next();
                List<Table> tables = sea.extract(page);

                for (Table table : tables) {
                    System.out.println("Extracted Table:");
                    for (List<RectangularTextContainer> row : table.getRows()) {
                        for (RectangularTextContainer cell : row) {
                            System.out.print(cell.getText() + " | "); // Print cell text
                        }
                        System.out.println(); // Move to the next row
                    }
                    System.out.println("\n-------------------------\n");
                }
            }

            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
--
Aadhar processor 
package com.example.demo;
import net.sourceforge.tess4j.*;
import com.google.zxing.*;
import com.google.zxing.client.j2se.*;
import com.google.zxing.common.*;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.*;
import java.io.*;
import java.util.*;
import java.util.regex.*;

public class AadhaarOcrProcessor {

    public static void main(String[] args) throws Exception {
        String filePath = "C:\\test.jpeg";  // Replace with your Aadhaar image path

        if (readQrCode(filePath)) {
            System.out.println("QR Code processed successfully.");
            return;  // Prefer QR extraction if successful
        }

        BufferedImage processedImage = preprocessImage(filePath);
        String extractedText = extractTextWithTesseract(processedImage);
        System.out.println("Extracted Text:\n" + extractedText);

        Map<String, String> fields = parseAadhaarFields(extractedText);
        System.out.println("Parsed Aadhaar Details: " + fields);
    }

    /**
     * Preprocess the image (convert to grayscale, apply simple threshold).
     */
    public static BufferedImage preprocessImage(String imagePath) throws IOException {
        BufferedImage image = ImageIO.read(new File(imagePath));

        // Convert to Grayscale
        BufferedImage grayscale = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
        Graphics2D g = grayscale.createGraphics();
        g.drawImage(image, 0, 0, null);
        g.dispose();

        // Apply Binarization (Thresholding)
        BufferedImage binary = new BufferedImage(grayscale.getWidth(), grayscale.getHeight(), BufferedImage.TYPE_BYTE_BINARY);
        for (int x = 0; x < grayscale.getWidth(); x++) {
            for (int y = 0; y < grayscale.getHeight(); y++) {
                int gray = new Color(grayscale.getRGB(x, y)).getRed();  // grayscale so R=G=B
                int threshold = 128;  // Simple fixed threshold
                int binaryValue = (gray > threshold) ? 0xFFFFFF : 0x000000;
                binary.setRGB(x, y, binaryValue);
            }
        }

        // Optional: Save processed image for debugging
        ImageIO.write(binary, "png", new File("processed_aadhaar.png"));

        return binary;
    }

    /**
     * Extract text from image using Tesseract OCR.
     */
    public static String extractTextWithTesseract(BufferedImage image) throws TesseractException {
        Tesseract tesseract = new Tesseract();
        tesseract.setDatapath("C:/Program Files/Tesseract-OCR/tessdata"); // Adjust this path for your system
//        tesseract.setDatapath("tessdata");  // Make sure 'tessdata' folder exists next to your project
        tesseract.setLanguage("eng");   // English + Hindi (for bilingual Aadhaar cards)

        // Important: Set whitelist for faster & accurate results
        tesseract.setTessVariable("preserve_interword_spaces", "1");
        tesseract.setTessVariable("tessedit_char_whitelist",
                "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZअआइईउऊऋएऐओऔकखगघङचछजझञटठडढणतथदधनपफबभमयरलवशषसहािीुूृेैोौं:,-/. ");

        return tesseract.doOCR(image);
    }

    /**
     * Parse text into structured Aadhaar fields.
     */
    public static Map<String, String> parseAadhaarFields(String text) {
        Map<String, String> fields = new LinkedHashMap<>();

        Pattern aadhaarPattern = Pattern.compile("\\b\\d{4}\\s\\d{4}\\s\\d{4}\\b");
        Pattern dobPattern = Pattern.compile("(DOB|D\\.O\\.B|Date of Birth|जन्म तिथि)[:\\-]?\\s*(\\d{2}/\\d{2}/\\d{4})");
        Pattern genderPattern = Pattern.compile("\\b(Male|Female|MALE|FEMALE|पुरुष|महिला)\\b");

        Matcher matcher = aadhaarPattern.matcher(text);
        if (matcher.find()) fields.put("Aadhaar Number", matcher.group());

        matcher = dobPattern.matcher(text);
        if (matcher.find()) fields.put("Date of Birth", matcher.group(2));

        matcher = genderPattern.matcher(text);
        if (matcher.find()) fields.put("Gender", matcher.group());

        // Heuristic: Name is usually 2nd or 3rd line after 'Government of India'
        String[] lines = text.split("\\r?\\n");
        for (int i = 0; i < lines.length; i++) {
            if (lines[i].contains("Government of India") || lines[i].contains("भारत सरकार")) {
                if (i + 1 < lines.length) {
                    fields.put("Name", lines[i + 1].trim());
                }
                break;
            }
        }

        return fields;
    }

    /**
     * Try to read Aadhaar QR code (if present).
     */
    public static boolean readQrCode(String imagePath) {
        try {
            BufferedImage bufferedImage = ImageIO.read(new File(imagePath));
            LuminanceSource source = new BufferedImageLuminanceSource(bufferedImage);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
            Result result = new MultiFormatReader().decode(bitmap);

            System.out.println("QR Code Data: " + result.getText());

            // Optional: Aadhaar QR sometimes contains XML data directly
            if (result.getText().contains("<PrintLetterBarcodeData")) {
                System.out.println("Parsed Aadhaar QR XML Data:\n" + result.getText());
            }

            return true;  // QR code was detected and processed
        } catch (Exception e) {
            System.out.println("No QR Code detected. Falling back to OCR.");
            return false;
        }
    }
}
